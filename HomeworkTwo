pragma solidity 0.4.21;

contract Ownable {
    address public owner;
    
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);
    
    
    function Ownable() public {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }
    
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

}

library VotingLib {
    struct Vote {
        uint ID;
        address beneficiary;
        uint amount;
        uint votesFor;
        uint votesAgainst;
        uint target;
        bool finished;
        bool successful;
        mapping(address => bool) voted;
    }
    
    function update(Vote storage self, address voter, bool voteFor, uint256 voteImportance) public returns(bool){
        require(!self.finished);
        require(!self.voted[voter]);
        
        self.voted[voter] = true;
        
        if(voteFor){
            self.votesFor += voteImportance;
        } else {
            self.votesAgainst -= voteImportance;
        }
        
        if(self.votesFor > self.target){
            self.finished = true;
            self.successful = true;
        } else if(self.votesAgainst >= self.target) {
            self.finished = true;
            self.successful = false;
        }
        
        return self.finished;
    }
}

contract Distributor is Ownable {
    using VotingLib for VotingLib.Vote;
    
    function() public payable {}
    
    address[] members;
    uint256[] importances;
    mapping(address => uint256) importanceOfMembers;
    
    mapping(uint => VotingLib.Vote) public votes;
    mapping(address => bool) isVoter;
    uint totalVotes;
    
    mapping(address => uint) withdrawals;
    
    bool initialized;
    
    event LogStartedVote(uint ID);
    event LogEndedVote(uint ID, bool successful);
    
    modifier isInit {
        require(initialized);
        _;
    }
    
    modifier onlyVoter {
        require(isVoter[msg.sender]);
        _;
    }
    
    modifier voteExists(uint voteID) {
        require(votes[voteID].ID != 0);
        _;
    }
    
    function initialize(address[] _members, uint256[] _importances) public onlyOwner {
        require(_members.length >= 3);
        require(!initialized);
        initialized = true;
        
        members = _members;
        importances = _importances;
        
        for(uint i = 0; i<_members.length; i++){
            importanceOfMembers[members[i]] = importances[i];
        }
        
         for(uint k = 0; k<importances.length; k++){
            totalVotes += importances[l];
        }
        
        for(uint l = 0; l<_members.length; l++){
            isVoter[_members[i]] = true;
        }
    }
    
    function startVote(address _beneficiary, uint _amount) public isInit onlyVoter returns(uint){
        uint voteID = now;
        
        votes[voteID] = VotingLib.Vote({ID: voteID, beneficiary: _beneficiary, amount: _amount, votesFor: 0, votesAgainst: 0, target: totalVotes/2, finished: false, successful: false});
        
        emit LogStartedVote(voteID);
        
        return voteID;
    }
    
    function vote(uint id, bool voteFor) public isInit onlyVoter voteExists(id) {
        if(votes[id].update(msg.sender, voteFor, importanceOfMembers[msg.sender])){
            emit LogEndedVote(id, votes[id].successful);
        }
        if(votes[id].successful){
            withdrawals[votes[id].beneficiary] += votes[id].amount;
        }
    }
    
    function withdraw() public {
        withdrawals[msg.sender] = 0;
        msg.sender.transfer(withdrawals[msg.sender]);
    }
       
}
